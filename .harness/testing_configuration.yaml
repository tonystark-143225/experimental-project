pipeline:
  name: testing_configuration
  identifier: testing_configuration
  projectIdentifier: appattendance
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: pipeline_init
        identifier: pipeline_init
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          caching:
            enabled: true
            override: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: default
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: init_codebase
                  identifier: init_codebase
                  spec:
                    connectorRef: account.harnessImage
                    image: ubuntu:latest
                    shell: Bash
                    command: echo "test"
    - stage:
        name: trigger_configuration
        identifier: inti_configuration
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: inticonfig
                  identifier: inticonfig
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          #!/bin/bash
                          set -euo pipefail

                          # Harness expressions for trigger context
                          branch="${<+codebase.branch>}"
                          tag="${<+codebase.tag>}"
                          commitId="${<+codebase.commitSha>}"
                          srcbranch="${<+trigger.sourceBranch>}"
                          event="${<+trigger.event>}"               # e.g. PR, PUSH
                          triggerType="${<+trigger.type>}"         # e.g. Webhook, Manual, Scheduled

                          # Normalize nulls
                          branch="${branch:-null}"
                          tag="${tag:-null}"
                          commitId="${commitId:-unknown}"
                          srcbranch="${srcbranch:-null}"
                          event="${event:-null}"
                          triggerType="${triggerType:-null}"

                          # Default flags
                          isOkForBuild=0
                          isOkForDev=0
                          isOkForQa=0
                          isOkForPprAndPrd=0
                          isCronBuild=0

                          # App version default
                          appVersion="0.0.0-$(date +%Y%m%d%H%M%S)"

                          echo "Trigger type: $triggerType"
                          echo "Event: $event"
                          echo "Branch: $branch"
                          echo "Tag: $tag"
                          echo "Commit ID: $commitId"
                          echo "Source Branch: $srcbranch"

                          # Regex patterns
                          regexStableReleaseTag="^([0-9]+)(\.([0-9]+)){2,5}$"
                          regexUnstableReleaseTag="^([0-9]+)(\.([0-9]+)){2,5}-.*$"

                          # ----------------------------
                          # üîÅ Trigger Handling Logic
                          # ----------------------------

                          if [[ "$triggerType" == "Scheduled" ]]; then
                              # Scheduled (cron) build
                              appVersion="0.0.0-cron-$(date +%Y%m%d%H%M%S)"
                              isOkForBuild=1
                              isCronBuild=1

                          elif [[ "$event" == "PR" ]]; then
                              # Pull request event
                              cleanSrcBranch="${srcbranch//[\/,_]/-}"
                              appVersion="0.0.0-${cleanSrcBranch}-${commitId}"
                              isOkForBuild=1
                              isOkForDev=1

                          elif [[ "$tag" != "null" && "$tag" != "" ]]; then
                              # Tag-based trigger (likely release)
                              appVersion="${tag//[\/,_]/-}"

                              if [[ "$appVersion" =~ $regexStableReleaseTag ]]; then
                                  isOkForBuild=1
                                  isOkForDev=1
                                  isOkForQa=1
                                  isOkForPprAndPrd=1
                              elif [[ "$appVersion" =~ $regexUnstableReleaseTag ]]; then
                                  isOkForBuild=1
                                  isOkForDev=1
                                  isOkForQa=1
                                  isOkForPprAndPrd=0
                              else
                                  # Invalid or unknown tag format
                                  isOkForBuild=0
                              fi

                          elif [[ "$branch" != "null" && "$branch" != "" ]]; then
                              # Branch push or manual run on a branch
                              cleanBranch="${branch//[\/,_]/-}"
                              appVersion="0.0.0-${cleanBranch}-${commitId}"
                              isOkForBuild=1
                              isOkForDev=1
                              isOkForQa=1
                              isOkForPprAndPrd=0

                          else
                              # Unknown trigger type or invalid input
                              echo "‚ö†Ô∏è  Unknown or unsupported trigger type: $triggerType / event: $event"
                              isOkForBuild=0
                          fi
                    environmentVariables: []
                    outputVariables:
                      - name: okBuild
                        type: String
                        value: isOkForBuild
                      - name: okDev
                        type: String
                        value: isOkForDev
                      - name: okQa
                        type: String
                        value: isOkForQa
                      - name: okPprAndPrd
                        type: String
                        value: isOkForPprAndPrd
                      - name: appVersion
                        type: String
                        value: appVersion
                      - name: commitId
                        type: String
                        value: commitId
                  timeout: 10m
        tags: {}
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          caching:
            enabled: true
            override: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: dev
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: test
                  identifier: Run_1
                  spec:
                    connectorRef: mydockerhub
                    image: nginx:latest
                    shell: Sh
                    command: echo "test"
