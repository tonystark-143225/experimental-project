pipeline:
  name: testing_configuration
  identifier: testing_configuration
  projectIdentifier: appattendance
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: pipeline_init
        identifier: pipeline_init
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
            paths: []
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: default
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: init_codebase
                  identifier: init_codebase
                  spec:
                    connectorRef: account.harnessImage
                    image: ubuntu:latest
                    shell: Bash
                    command: echo "test"
          buildIntelligence:
            enabled: false
    - stage:
        name: trigger_configuration
        identifier: inti_configuration
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: inticonfig
                  identifier: inticonfig
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: "#!/bin/bash\nset -euo pipefail\n\n# ------------------------------------------------------------\n# ðŸŸ¢ Collect Harness trigger context (always quoted â†’ safe)\n# ------------------------------------------------------------\n\ntriggerType=\"<+trigger.type>\"        # Manual, Webhook, Scheduled\nbranch=\"<+codebase.branch>\"          # branch name or null\ntag=\"<+codebase.tag>\"                # git tag or null\ncommitId=\"<+codebase.commitSha>\"     # commit SHA or null\nsrcbranch=\"<+trigger.sourceBranch>\"  # PR source branch\nevent=\"<+trigger.event>\"             # PR, PUSH, etc.\n\nif [ \"$triggerType\" = \"Manual\" ]; then\n   isOkForBuild=1\n   isOkForDev=1\nelif [ \"$triggerType\" = \"Scheduled\" ]; then\n     isOkForBuild=1\n     isOkForDev=1\n     isOkForPpd=1\nfi\n\necho \"isOkForBuild=$isOkForBuild\"\necho \"isOkForDev=$isOkForDev\"\necho \"isOkForPpd=$isOkForPpd\"\n# environmentVariables: []\n# \toutputVariables:\n# \t- name: isOkForBuild\n# \t- name: isOkForDev\n# \t- name: isOkForPpd\n# ------------------------------------------------------------\n# ðŸŸ¢ Final decision\n# ------------------------------------------------------------\n#echo \"Resolved appVersion: $appVersion\"\n# echo \"isOkForBuild=$isOkForBuild\"\n# echo \"isOkForDev=$isOkForDev\"\n# echo \"isOkForQa=$isOkForQa\"\n# echo \"isOkForPprAndPrd=$isOkForPprAndPrd\"\n# echo \"isCronBuild=$isCronBuild\"\n\n# Export for Harness output variables\n# echo \"isOkForBuild=$isOkForBuild\" >> build.env\n# echo \"isOkForDev=$isOkForDev\" >> build.env\n# echo \"isOkForQa=$isOkForQa\" >> build.env\n# echo \"isOkForPprAndPrd=$isOkForPprAndPrd\" >> build.env\n# echo \"isCronBuild=$isCronBuild\" >> build.env\n# echo \"appVersion=$appVersion\" >> build.env\n# echo \"commitId=$commitId\" >> build.env\n"
                    environmentVariables: []
                    outputVariables:
                      - name: okBuild
                        type: String
                        value: isOkForBuild
                      - name: okDev
                        type: String
                        value: isOkForDev
                      - name: okPpd
                        type: String
                        value: isOkForPpd
                  timeout: 10m
        tags: {}
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          caching:
            enabled: true
            override: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: dev
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: test
                  identifier: Run_1
                  spec:
                    connectorRef: mydockerhub
                    image: nginx:latest
                    shell: Sh
                    command: echo "test"
        when:
          pipelineStatus: Success
          condition: <+stage.variables.okBuild> == "1"
        variables:
          - name: okBuild
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.inti_configuration.spec.execution.steps.inticonfig.output.outputVariables.okBuild>
    - stage:
        name: dev-approval
        identifier: devapproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: dev-approval
                  identifier: devapproval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - devapprovers
                    isAutoRejectEnabled: false
                    approverInputs: []
        tags: {}
    - stage:
        name: dev-deploy
        identifier: devdeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: deployweb
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: devinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: ppd-approval
        identifier: ppdapproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: ppd-approval
                  identifier: ppdapproval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - account._account_all_users
                    isAutoRejectEnabled: false
                    approverInputs: []
        tags: {}
    - stage:
        name: ppd-deploy
        identifier: ppddeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: deployweb
          environment:
            environmentRef: ppd
            deployToAll: false
            infrastructureDefinitions:
              - identifier: ppdinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: prd-approval
        identifier: prdapproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: prd-approval
                  identifier: prdapproval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - account._account_all_users
                    isAutoRejectEnabled: false
                    approverInputs: []
        tags: {}
    - stage:
        name: prd-deploy
        identifier: prddeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: deployweb
          environment:
            environmentRef: prd
            deployToAll: false
            infrastructureDefinitions:
              - identifier: prdinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  properties:
    ci:
      codebase:
        connectorRef: account.tonystarkac
        repoName: experimental-project
        build: <+input>
        sparseCheckout: []
