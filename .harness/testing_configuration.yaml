pipeline:
  name: testing_configuration
  identifier: testing_configuration
  projectIdentifier: appattendance
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: pipeline_init
        identifier: pipeline_init
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
            paths: []
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: default
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: init_codebase
                  identifier: init_codebase
                  spec:
                    connectorRef: account.harnessImage
                    image: ubuntu:latest
                    shell: Bash
                    command: echo "test"
          buildIntelligence:
            enabled: false
    - stage:
        name: trigger_configuration
        identifier: inti_configuration
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: inticonfig
                  identifier: inticonfig
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash
                          set -euo pipefail

                          # ------------------------------------------------------------
                          # 🟢 Collect Harness trigger context (always quoted → safe)
                          # ------------------------------------------------------------
                          triggerType="<+trigger.type>"        # Manual, Webhook, Scheduled
                          branch="<+codebase.branch>"          # branch name or null
                          tag="<+codebase.tag>"                # git tag or null
                          commitId="<+codebase.commitSha>"     # commit SHA or null
                          srcbranch="<+trigger.sourceBranch>"  # PR source branch
                          event="<+trigger.event>"             # PR, PUSH, etc.

                          # ------------------------------------------------------------
                          # 🟢 Normalize missing values (avoid unbound vars)
                          # ------------------------------------------------------------
                          triggerType=${triggerType:-null}
                          branch=${branch:-null}
                          tag=${tag:-null}
                          commitId=${commitId:-unknown}
                          srcbranch=${srcbranch:-null}
                          event=${event:-null}

                          # ------------------------------------------------------------
                          # 🟢 Defaults
                          # ------------------------------------------------------------
                          isOkForBuild=0
                          isOkForDev=0
                          isOkForQa=0
                          isOkForPprAndPrd=0
                          isCronBuild=0
                          appVersion="0.0.0-$(date +%Y%m%d%H%M%S)"

                          echo "Trigger type : $triggerType"
                          echo "Event        : $event"
                          echo "Branch       : $branch"
                          echo "Tag          : $tag"
                          echo "Commit ID    : $commitId"
                          echo "Source Branch: $srcbranch"

                          # Regex patterns for release tags
                          regexStableReleaseTag="^([0-9]+)(\.([0-9]+)){2,5}$"
                          regexUnstableReleaseTag="^([0-9]+)(\.([0-9]+)){2,5}-.*$"

                          # ------------------------------------------------------------
                          # 🔁 Trigger handling logic
                          # ------------------------------------------------------------
                          if [[ "$triggerType" == "Manual" ]]; then
                              echo "🚫 Manual trigger detected → Skipping build"
                              isOkForBuild=0

                          elif [[ "$triggerType" == "Scheduled" ]]; then
                              echo "⏰ Scheduled (cron) trigger detected"
                              appVersion="0.0.0-cron-$(date +%Y%m%d%H%M%S)"
                              isOkForBuild=1
                              isCronBuild=1

                          elif [[ "$event" == "PR" ]]; then
                              echo "🔀 PR event detected"
                              cleanSrcBranch="${srcbranch//[\/,_]/-}"
                              appVersion="0.0.0-${cleanSrcBranch}-${commitId}"
                              isOkForBuild=1
                              isOkForDev=1

                          elif [[ "$tag" != "null" && "$tag" != "" ]]; then
                              echo "🏷️  Tag trigger detected"
                              appVersion="${tag//[\/,_]/-}"

                              if [[ "$appVersion" =~ $regexStableReleaseTag ]]; then
                                  echo "✅ Stable release tag"
                                  isOkForBuild=1
                                  isOkForDev=1
                                  isOkForQa=1
                                  isOkForPprAndPrd=1
                              elif [[ "$appVersion" =~ $regexUnstableReleaseTag ]]; then
                                  echo "⚠️  Unstable release tag"
                                  isOkForBuild=1
                                  isOkForDev=1
                                  isOkForQa=1
                              else
                                  echo "❌ Invalid tag format → Build skipped"
                                  isOkForBuild=0
                              fi

                          elif [[ "$branch" != "null" && "$branch" != "" ]]; then
                              echo "🌿 Branch trigger detected"
                              cleanBranch="${branch//[\/,_]/-}"
                              appVersion="0.0.0-${cleanBranch}-${commitId}"
                              isOkForBuild=1
                              isOkForDev=1
                              isOkForQa=1

                          else
                              echo "⚠️ Unknown trigger type ($triggerType) or event ($event) → Build skipped"
                              isOkForBuild=0
                          fi

                          # ------------------------------------------------------------
                          # 🟢 Final decision
                          # ------------------------------------------------------------
                          echo "Resolved appVersion: $appVersion"
                          echo "isOkForBuild=$isOkForBuild"
                          echo "isOkForDev=$isOkForDev"
                          echo "isOkForQa=$isOkForQa"
                          echo "isOkForPprAndPrd=$isOkForPprAndPrd"
                          echo "isCronBuild=$isCronBuild"

                          # Export for Harness output variables
                          # echo "isOkForBuild=$isOkForBuild" >> build.env
                          # echo "isOkForDev=$isOkForDev" >> build.env
                          # echo "isOkForQa=$isOkForQa" >> build.env
                          # echo "isOkForPprAndPrd=$isOkForPprAndPrd" >> build.env
                          # echo "isCronBuild=$isCronBuild" >> build.env
                          # echo "appVersion=$appVersion" >> build.env
                          # echo "commitId=$commitId" >> build.env
                    environmentVariables: []
                    outputVariables:
                      - name: okBuild
                        type: String
                        value: isOkForBuild
                      - name: okDev
                        type: String
                        value: isOkForDev
                      - name: okQa
                        type: String
                        value: isOkForQa
                      - name: okPprAndPrd
                        type: String
                        value: isOkForPprAndPrd
                      - name: appVersion
                        type: String
                        value: appVersion
                      - name: commitId
                        type: String
                        value: commitId
                  timeout: 10m
        tags: {}
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          caching:
            enabled: true
            override: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: dev
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: test
                  identifier: Run_1
                  spec:
                    connectorRef: mydockerhub
                    image: nginx:latest
                    shell: Sh
                    command: echo "test"
        when:
          pipelineStatus: Success
          condition: |
            <+pipeline.stages.trigger_configuration.spec.execution.steps.inticonfig.output.outputVariables.okBuild> == "1"
  properties:
    ci:
      codebase:
        connectorRef: account.tonystarkac
        repoName: experimental-project
        build: <+input>
        sparseCheckout: []
