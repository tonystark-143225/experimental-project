pipeline:
  name: testing_configuration
  identifier: testing_configuration
  projectIdentifier: appattendance
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: pipeline_init
        identifier: pipeline_init
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
            paths: []
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: default
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: init_codebase
                  identifier: init_codebase
                  spec:
                    connectorRef: account.harnessImage
                    image: ubuntu:latest
                    shell: Bash
                    command: echo "test"
          buildIntelligence:
            enabled: false
    - stage:
        name: trigger_configuration
        identifier: trigger_configuration
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: vamsi_config
                  identifier: vamsi_config
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |+
                          #!/bin/bash
                          set -eo pipefail

                          # ------------------------------------------------------------
                          # ðŸŸ¢ Collect Harness trigger context (always quoted â†’ safe)
                          # ------------------------------------------------------------

                          triggerType="<+trigger.type>"        # Manual, Webhook, Scheduled
                          branch="<+codebase.branch>"          # branch name or null
                          tag="<+codebase.tag>"                # git tag or null
                          commitId="<+codebase.commitSha>"     # commit SHA or null
                          srcbranch="<+trigger.sourceBranch>"  # PR source branch
                          event="<+trigger.event>"             # PR, PUSH, etc.

                          if [ "$triggerType" = "Manual" ]; then
                             isOkForBuild=0
                             isOkForDev=1
                          elif [ "$triggerType" = "Scheduled" ]; then
                               isOkForBuild=1
                               isOkForDev=0
                               isOkForPpd=0
                          elif [ "$event" == "PR" ]; then
                                isOkForBuild=1
                                isOkForDev=1
                                isOkForPpd=1
                                isOkForPrd=0
                          fi

                    environmentVariables: []
                    outputVariables:
                      - name: okBuild
                        type: String
                        value: isOkForBuild
                      - name: okDev
                        type: String
                        value: isOkForDev
                      - name: okPpd
                        type: String
                        value: isOkForPpd
                      - name: okPrd
                        type: String
                        value: isOkForPrd
                  timeout: 10m
        tags: {}
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          caching:
            enabled: true
            override: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.test
              namespace: dev
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: test
                  identifier: Run_1
                  spec:
                    connectorRef: mydockerhub
                    image: nginx:latest
                    shell: Sh
                    command: echo "test"
        when:
          pipelineStatus: Success
          condition: <+stage.variables.okBuild> == "1"
        variables:
          - name: okBuild
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.trigger_configuration.spec.execution.steps.vamsi_config.output.outputvariables.okBuild>
    - stage:
        name: dev-approval
        identifier: devapproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: dev-approval
                  identifier: devapproval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - devapprovers
                    isAutoRejectEnabled: false
                    approverInputs: []
              - step:
                  type: ShellScript
                  name: isApproved
                  identifier: isApproved
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: isApproved=1
                    environmentVariables: []
                    outputVariables:
                      - name: isApproved
                        type: String
                        value: isApproved
                  timeout: 10m
        tags: {}
        variables:
          - name: okDev
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.trigger_configuration.spec.execution.steps.vamsi_config.output.outputVariables.okDev>
        when:
          pipelineStatus: All
          condition: <+stage.variables.okDev> == "1"
    - stage:
        name: dev-deploy
        identifier: devdeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: deployweb
          environment:
            environmentRef: dev
            deployToAll: false
            infrastructureDefinitions:
              - identifier: devinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables:
          - name: okDev
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.inti_configuration.spec.execution.steps.inticonfig.output.outputVariables.okDev>
          - name: isApprovedDev
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.devapproval.spec.execution.steps.isApproved.output.outputVariables.isApproved>
        when:
          pipelineStatus: All
          condition: <+stage.variables.okDev> == "1" && <+stage.variables.isApprovedDev> =="1"
    - stage:
        name: ppd-approval
        identifier: ppdapproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: ppd-approval
                  identifier: ppdapproval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - account._account_all_users
                    isAutoRejectEnabled: false
                    approverInputs: []
              - step:
                  type: ShellScript
                  name: isApproved
                  identifier: isApproved
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: isApproved=1
                    environmentVariables: []
                    outputVariables:
                      - name: isApproved
                        type: String
                        value: isApproved
                  timeout: 10m
        tags: {}
        variables:
          - name: okPpd
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.inti_configuration.spec.execution.steps.inticonfig.output.outputVariables.okPpd>
        when:
          pipelineStatus: Success
          condition: <+stage.stage.variables.okPpd> == "1"
    - stage:
        name: ppd-deploy
        identifier: ppddeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: deployweb
          environment:
            environmentRef: ppd
            deployToAll: false
            infrastructureDefinitions:
              - identifier: ppdinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables:
          - name: okPpd
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.inti_configuration.spec.execution.steps.inticonfig.output.outputVariables.okPpd>
          - name: isApprovedPpd
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.ppdapproval.spec.execution.steps.isApproved.output.outputVariables.isApproved>
        when:
          pipelineStatus: Success
          condition: <+stage.variables.okPpd> == "1" && <+stage.variables.isApprovedPpd> =="1"
    - stage:
        name: prd-approval
        identifier: prdapproval
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: prd-approval
                  identifier: prdapproval
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    approvalMessage: |-
                      Please review the following information
                      and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - account._account_all_users
                    isAutoRejectEnabled: false
                    approverInputs: []
              - step:
                  type: ShellScript
                  name: isApproved
                  identifier: isApproved
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: isApproved=1
                    environmentVariables: []
                    outputVariables:
                      - name: isApproved
                        type: String
                        value: isApproved
                  timeout: 10m
        tags: {}
        variables:
          - name: okPrd
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.inti_configuration.spec.execution.steps.inticonfig.output.outputVariables.okPrd>
        when:
          pipelineStatus: Success
          condition: <+stage.stage.variables.okPrd> == "1"
    - stage:
        name: prd-deploy
        identifier: prddeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: deployweb
          environment:
            environmentRef: prd
            deployToAll: false
            infrastructureDefinitions:
              - identifier: prdinfra
          execution:
            steps:
              - step:
                  name: Rollout Deployment
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
          condition: <+stage.variables.okPrd> == "1" && <+stage.variables.isApprovedPrd> =="1"
        variables:
          - name: okPrd
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.inti_configuration.spec.execution.steps.inticonfig.output.outputVariables.okPrd>
          - name: isApprovedPrd
            type: String
            description: ""
            required: false
            value: <+pipeline.stages.prdapproval.spec.execution.steps.isApproved.output.outputVariables.isApproved>
  properties:
    ci:
      codebase:
        connectorRef: account.tonystarkac
        repoName: experimental-project
        build: <+input>
        sparseCheckout: []
