pipeline:
  name: diun
  identifier: diun
  projectIdentifier: appattendance
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Check_Docker_Tags
        identifier: Check_Docker_Tags
        description: Check for new MySQL Docker tags and notify via email
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: RunTagCheckScript
                  identifier: RunTagCheckScript
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash

                          # ========= Install jq if missing =========
                          if ! command -v jq &> /dev/null; then
                            echo "📦 Installing jq..."
                            if command -v microdnf &> /dev/null; then
                              microdnf install -y jq
                            elif command -v dnf &> /dev/null; then
                              dnf install -y jq
                            else
                              yum install -y jq
                            fi
                          fi

                          # ========= Configurable Variables =========
                          # Format: image|namespace|referenceTag
                          images=(
                            "mysql|library|8.0"
                            "redis|library|7.0"
                            "nginx|library|1.25"
                          )

                          pageSize=100  # Number of tags to fetch
                          # ==========================================

                          # Collect all output here
                          all_results=""

                          for entry in "${images[@]}"; do
                              IFS='|' read -r imageName namespace referenceTag <<< "$entry"

                              all_results+="=========================================\n"
                              all_results+="🔍 Checking image: ${namespace}/${imageName}\n"
                              all_results+="➡️  Reference tag: $referenceTag\n"

                              baseUrl="https://registry.hub.docker.com/v2/repositories/${namespace}/${imageName}"
                              referenceUrl="${baseUrl}/tags/${referenceTag}"
                              referenceJson=$(curl -s "$referenceUrl")

                              if [[ -z "$referenceJson" || "$referenceJson" == *"Not Found"* ]]; then
                                  all_results+="❌ Failed to fetch tag '$referenceTag'\n\n"
                                  continue
                              fi

                              referenceLastUpdated=$(echo "$referenceJson" | jq -r '.last_updated')
                              all_results+="📌 '$referenceTag' last updated at: $referenceLastUpdated\n\n"

                              tagsUrl="${baseUrl}/tags?page_size=${pageSize}&ordering=last_updated"
                              tagsJson=$(curl -s "$tagsUrl")

                              if [[ -z "$tagsJson" || "$tagsJson" == *"error"* ]]; then
                                  all_results+="❌ Failed to fetch tags list.\n\n"
                                  continue
                              fi

                              found=false
                              while read -r tag; do
                                  tagName=$(echo "$tag" | jq -r '.name')
                                  tagUpdated=$(echo "$tag" | jq -r '.last_updated')

                                  if [[ "$tagUpdated" > "$referenceLastUpdated" ]]; then
                                      all_results+="🆕 $tagName — Updated at: $tagUpdated\n"
                                      found=true
                                  fi
                              done < <(echo "$tagsJson" | jq -c '.results[]')

                              if [[ "$found" != "true" ]]; then
                                  all_results+="✅ No newer tags found.\n"
                              fi

                              all_results+="\n"
                          done

                          # Convert literal newlines to \n for Harness
                          all_results_harness=$(echo -e "$all_results" | sed ':a;N;$!ba;s/\n/\\n/g')

                          # Export to Harness output variable
                          echo "HARNESS_OUTPUT_VAR=$all_results_harness" >> $HARNESS_OUTPUT_FILE
                    environmentVariables: []
                    outputVariables:
                      - name: TAG_CHECK_OUTPUT
                        type: String
                        value: HARNESS_OUTPUT_VAR
                    executionTarget: {}
                  timeout: 10m
              - step:
                  type: Email
                  name: SendEmailNotification
                  identifier: SendEmailNotification
                  spec:
                    to: vamsi.awscloud@gmail.com
                    subject: New Docker Tags for MySQL
                    body: |
                      Hello Team,

                      The following Docker tags were checked against reference tag **8.0**:

                      <+pipeline.stages.Check_Docker_Tags.spec.execution.steps.RunTagCheckScript.output.outputVariables.TAG_CHECK_OUTPUT>

                      Regards,
                      Harness Pipeline
                    cc: ""
                  timeout: 10m
